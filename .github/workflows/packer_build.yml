name: Workflow CII
 
on:
  pull_request:
    #types: [closed]
    branches:
      - main
 
jobs:
  build:
    name: test-build
    #if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
      
    strategy:
      matrix:
        node-version: [20.x]
 
    steps:
 
      - name: Start MySQL
        run: |
          sudo systemctl start mysql
          sudo systemctl status mysql
 
      - name: Configure MySQL
        run: |
         sudo mysql -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "CREATE DATABASE IF NOT EXISTS ${{ secrets.DB }};"
         sudo mysql -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "CREATE USER IF NOT EXISTS '${{ secrets.DB_USER }}'@'localhost' IDENTIFIED BY '${{ secrets.DB_PASSWORD }}';"
         sudo mysql -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "GRANT ALL PRIVILEGES ON ${{ secrets.DB }}.* TO '${{ secrets.DB_USER }}'@'localhost';"
         sudo mysql -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "FLUSH PRIVILEGES;"
 
      - uses: actions/checkout@v2
 
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
    
      - name: Set up environment variables
        run: |         
          echo "DB_USER=${{ secrets.DB_USER}}" > .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB=${{ secrets.DB }}" >> .env
          echo "HOST=${{ secrets.HOST }}" >> .env
          echo "DIALECT=${{ secrets.DIALECT }}" >> .env
          echo "DIALECT=${{ secrets.NODE_ENV}}" >> .env
 
      - name: Install Dependencies
        run: npm install
 
      - name: Start the application
        run: |
            npm start &
        
      - name: Wait for the application to be ready
        run: |
            sleep 10
            until curl -s http://localhost:8080; do
              sleep 5
            done
 
      - name: Run Tests
        run: npm test

      - name: Remove .env file
        run: rm .env
 
      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
  
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
  
      - name: 'Use gcloud CLI'
        run: 'gcloud info'
        
      - name: Create webapp.zip
        run: |
            zip -r webapp.zip ./
 
      # - name: Install Packer
      #   run: |
      #     curl -fsSL https://releases.hashicorp.com/packer/1.7.5/packer_1.7.5_linux_amd64.zip -o packer.zip
      #     unzip packer.zip -d /tmp
      #     sudo mv /tmp/packer /usr/bin/packer
      #     packer --version
 
      - name: Initialize Packer
        run: packer init packer-config/custom_image.pkr.hcl
 
      - name: Build custom image
        run:  packer build -var 'project_id=${{ secrets.GCP_PROJECT_ID }}'  packer-config/custom_image.pkr.hcl