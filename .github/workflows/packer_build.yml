name: Workflow CII

on:
  pull_request:
    #types: [closed]
    branches:
      - main

jobs:
  build:
    name: test-build
    #if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:

      - name: Start MySQL
        run: |
          sudo systemctl start mysql
          sudo systemctl status mysql

      - name: Configure MySQL
        run: |
          sudo mysql -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "CREATE DATABASE IF NOT EXISTS ${{ secrets.DB }};"
          sudo mysql -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "CREATE USER IF NOT EXISTS '${{ secrets.DB_USER }}'@'localhost' IDENTIFIED BY '${{ secrets.DB_PASSWORD }}';"
          sudo mysql -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "GRANT ALL PRIVILEGES ON ${{ secrets.DB }}.* TO '${{ secrets.DB_USER }}'@'localhost';"
          sudo mysql -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "FLUSH PRIVILEGES;"

      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Set up environment variables
        run: |
          echo "DB_USER=${{ secrets.DB_USER}}" > .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB=${{ secrets.DB }}" >> .env
          echo "HOST=${{ secrets.HOST }}" >> .env
          echo "DIALECT=${{ secrets.DIALECT }}" >> .env
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> .env

      - name: Install Dependencies
        run: npm install

      - name: Start the application
        run: |
            npm start &

      - name: Wait for the application to be ready
        run: |
            sleep 10
            until curl -s http://localhost:8080; do
              sleep 5
            done

      # - name: Run Tests
      #   run: npm test

      - name: Remove .env file
        run: rm .env

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Use gcloud CLI'
        run: 'gcloud info'

      - name: Create webapp.zip
        run: |
            zip -r webapp.zip ./

      - name: Initialize Packer
        run: packer init packer-config/custom_image.pkr.hcl

      # - name: Build custom image
      #   run:  packer build -var 'project_id=${{ secrets.GCP_PROJECT_ID }}'  packer-config/custom_image.pkr.hcl

      - name: Read Manifest JSON
        run: |
          # Read the manifest.json file and extract the image name
          image_list=$(gcloud compute images list --filter="name~'custom-image-.*'" --format="value(NAME, creationTimestamp)" | sort -k2 -r)

          echo "$image_list"
          # Extract latest image
          latest_image=$(echo "$image_list" | head -n1 | awk '{print $1}')

          echo "Latest Image: $latest_image"

          gcloud compute instance-templates create webapp-template-$(date +%Y%m%d%H%M%S) \
            --machine-type=e2-medium \
            --image=$latest_image \
            --network=https://www.googleapis.com/compute/v1/projects/tf-gcp-infra-414023/global/networks/my-vpc \
            --subnet=https://www.googleapis.com/compute/v1/projects/tf-gcp-infra-414023/regions/us-central1/subnetworks/webapp \
            --description="my-template" \
            --region=us-central1 \
            --boot-disk-type=pd-balanced \
            --boot-disk-device-name=my-boot-disk \
            --boot-disk-size=100GB \
            --boot-disk-kms-keyring="projects/tf-gcp-infra-414023/locations/us-central1/keyRings/my-key-ring-7/cryptoKeys/vm-cmek-key"
            --metadata=startup-script="ENV_FILE=\"/opt/webapp/.env\"

          if [ ! -f \"\$ENV_FILE\" ]; then
              CHOST=\$(echo \$\{{ secrets.CHOST \}})
              echo $CHOST
              CDB_USER=\$(echo \$\{{ secrets.CDB_USER \}})
              echo $CDB_USER
              CDB_PASSWORD="G5eAfWLcJXPlbdknjWci"
              echo $CDB_PASSWORD
              CDB=\$(echo \$\{{ secrets.CDB \}})
              echo $CDB


              # Write environment variables to the .env file
              echo \"HOST=\$CHOST\" > /opt/webapp/.env
              echo \"DB=\$CDB\" >> /opt/webapp/.env
              echo \"DB_USER=\$CDB_USER\" >> /opt/webapp/.env
              echo \"DB_PASSWORD=\$CDB_PASSWORD\" >> /opt/webapp/.env
              echo \"DIALECT=mysql\" >> /opt/webapp/.env
              echo \"LOGPATH=/var/log/webapp/myapp.log\" >> /opt/webapp/.env
              echo \"Environment variables written to \$ENV_FILE\"
          else
              echo \"The file \$ENV_FILE already exists. Skipping writing environment variables.\"
          fi

          sudo ./opt/webapp/packer-config/configure_systemd.sh\"" \
            --service-account=monitoring-service-account@tf-gcp-infra-414023.iam.gserviceaccount.com \
            --scopes="cloud-platform" \
            # --boot-disk-interface=SCSI \
            --format=json

      - name: Update Managed Instance Group
        run: |
          # Update managed instance group with the new template
          gloud compute instance-groups managed rolling-action replace my-instance-group --zone us-central1-a --replacement-method=recreate --new-instance-template=my-template

      - name: Recreate Instances
        run: |
          # Recreate instances in the managed instance group
          gcloud compute instance-groups managed recreate-instances my-instance-group --zone us-central1-a

      - name: Wait for Instance Refresh
        run: |
          # Wait for instance group refresh to complete
          gcloud compute instance-groups managed wait-until-stable my-instance-group --zone us-central1-a
